rule RNAseQC:
    """
    RNA-SeQC computes a series of quality control metrics for RNA-seq data. 
    The input can be one or more BAM files. 
    The output consists of HTML reports and tab delimited files of metrics data.
    This program can be valuable for comparing sequencing quality across 
    different samples or experiments to evaluate different experimental 
    parameters. It can also be run on individual samples as a means of 
    quality control before continuing with downstream analysis.

    RNA-SeQC is built on the GATK as well as the Picard API.

    Required input:
        - __RNAseQC__input_bam : a set of BAM files (sorted and indexed with reOrderSam)

    Required output:
        - __RNAseQC__output_directory: directory where to output files
        - __RNAseQC__output_conf: the configuration feed to RNA-seQC
        - __RNAseQC__output_figure: plot of transcript-associated 
            reads (also avalaible in multiQC)

    Other requirements:
        -  __RNAseQC__logs

    Required configuration:
        .. code-block:: yaml

            RNAseQC:
                 do: no
                 gtf_file: path to a GTF file
                 BWArRNA_file: path to the fasta file with ribosomale sequences
                 options: Any option recognized by RNAseQC tool


    References:
        http://archive.broadinstitute.org/cancer/cga/rnaseqc_run
    """
    input :
        bam=__RNAseQC__input_bam,
        genome=__RNAseQC__input_genome,
        gtf=__RNAseQC__input_gtf
    log :
        __RNAseQC__logs
    output:
        sample_index = __RNAseQC__output_conf,
        png = __RNAseQC__output_figure
    params:
        directory = __RNAseQC__params_directory,
        #rRNA = config['RNAseQC']['BWArRNA_file'],
        kwargs = config['RNAseQC']['options']

    run:
        import pandas as pd
        import matplotlib.pyplot as pl
        pl.style.use('ggplot')
        import re
        import os
        if os.path.isdir(params['directory']) is False:
            os.mkdir(params['directory'])

        #create the sample index
        data = [(re.split(r'_',file)[0], file, 'NA') for file in input["bam"]]
        df = pd.DataFrame(data, columns=['Sample ID','Bam File','Notes'])
        #print(df, output['sample_index'])
        df.to_csv(output['sample_index'], sep="\t",index=False)
        df.to_csv("/home/cokelaer/test.tsv", sep="\t",index=False)

        #run RNAseQC
        #shell("rna-seqc -o {params.directory}  -r {input.genome}  -s {output.sample_index} -t {input.gtf}  -BWArRNA {params.rRNA} {params.kwargs} 2> {log}")
        shell("rna-seqc -o {params.directory}  -r {input.genome}  -s {output.sample_index} -t {input.gtf}   {params.kwargs} 2> {log}")

        thisfile = os.path.join(params['directory'], "metric.tsv")
        if os.path.isfile(thisfile):
            df = pd.DataFrame.from_csv(thisfile, header = 0, sep="\t")
            #plot results
            if sum(df['rRNA rate']) == 0 :
                frames = [df['rRNA rate'] ,df['Exonic Rate'], df['Intronic Rate'], df['Intergenic Rate']]
            else :
                frames = [df['rRNA rate'], df['Exonic Rate'] - df['rRNA rate'], df['Intronic Rate'],
                     df['Intergenic Rate']]
        res = pd.concat(frames, axis=1)
        ## 
        res.plot(kind='bar', stacked=True)
        pl.ylim([0,1])
        #pl.legend(('rRNA rate', 'Exonic Rate', 'Intronic Rate', 'Intergenic Rate'), loc='lower center',
        #           bbox_to_anchor=(0.5, +1.00), fancybox=True, shadow=True, ncol=4)
        pl.legend(('rRNA rate', 'Exonic Rate', 'Intronic Rate', 'Intergenic Rate'), loc='best')
        pl.tight_layout()
        pl.savefig(output.png)





