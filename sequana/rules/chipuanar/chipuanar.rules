rule chipuanar:
    """
    Use chipuanar to compute differential expressed peaks for each mark

    Required input:
        __chipuanar__input: matrix count

    Required output:
        __chipuanar__conds: conditions for each file
        __chipuanar__rep: replicate name for each file
        __chipuanar__norm:
        __chipuanar__spikes:
        _chipuanar__padj:
        __chipuanar__alpha:
        __chipuanar__batch:

    """
    input:
        inputs = __chipuanar__input
    params:
        conds = __chipuanar__conds,
        rep = __chipuanar__rep,
        method = __chipuanar__method,
        norm = __chipuanar__norm,
        spikes = __chipuanar__spikes,
        padj = __chipuanar__padj,
        alpha = __chipuanar__alpha,
        batch = __chipuanar__batch,
        genome = __chipuanar__genome
    output:
        report = __chipuanar__report,
        outdir = __chipuanar__output_dir,
        config = __chipuanar__config_r
    log:
        __chipuanar__log
    run:
        import os
        from sequana import sequana_data
        import linecache


        # Sed on matrix to get MARK_COND_REP as sample names
        if 'NoBlacklist' in open(input[0]).read():
            shell("sed -i 's/4-NoBlacklist\///g' %s && sed -i 's/_%s_sort_dedup_NoBlacklist.bam//g' %s" % (input[0], params.genome, input[0]))
        else:
            shell("sed -i 's/3-Deduplication\///g' %s && sed -i 's/_%s_sort_dedup.bam//g' %s " % (input[0], params.genome, input[0]))

        # get cond and rep vectors
        samples = (linecache.getline(file, 2)).rstrip().split('\t')[6:]
        conds = []
        rep = []
        for sample in samples:
            conds.append(sample.split("_")[1])
            rep.append(sample.split("_")[2])

        os.makedirs(output[1])
        # Write the R config file
        with open(output[2], "w") as out:
            out.write("file <- '%s'\n" %  (input[0]))
            out.write("Conditions <- c(%s)\n" %  (conds))
            out.write("Replicates <- c(%s)\n" %  (rep))
            out.write("method <- '%s'\n" %  (params.method))
            out.write("normalisation <- '%s'\n" %  (params.norm))
            out.write("spikes <- c(%s)\n" %  (params.spikes))
            out.write("pAdjustMethod <- '%s'\n" %  (params.padj))
            out.write("alpha <- '%s'\n" %  (params.alpha))
            out.write("batch <- '%s'\n" %  (params.batch))


        # load the Rmarkdown
        os.chdir(output[1])
        chipuanar_script = sequana_data("Report_ChIPuanaR.Rmd", where="scripts")
        shell("cp %s . " % (chipuanar_script))
        shell("""Rscript -e "rmarkdown::render(input='%s', output_file='%s', run_pandoc=TRUE, clean=TRUE)" """ % (chipuanar_script, output))


